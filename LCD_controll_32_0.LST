C51 COMPILER V9.03   LCD_CONTROLL_32_0                                                     08/07/2013 13:58:03 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE LCD_CONTROLL_32_0
OBJECT MODULE PLACED IN LCD_controll_32_0.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LCD_controll_32_0.c COMPACT ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          
   2          
   3          
   4           
   5          
   6          //-----------------------------------------------------------------------------
   7          // Function PROTOTYPES
   8          //-----------------------------------------------------------------------------
   9          void            Restart_LCD             (void);
  10          void            BlankLCD                        (void);
  11          void            Reset_LCD                       (void);
  12          void            Send_LCD_comm           (int, char);
  13          //char          Fetch_SPI                       (char);
  14          void            Print_LCD                       (void);
  15          void            LCD_CS_Mode             (char);
  16          void            Delay                           (unsigned char);
  17          void            LCD_DATA_Mode           (char);
  18          void            LCD_CLK_Mode            (char);
  19          void            peep                            (void);
  20          void            Start_Display           (void);
  21          
  22          
  23          
  24          extern char pdata LCD_Buffer[16];       //  LCD image
  25          
  26          
  27          void Restart_LCD ()
  28          {
  29   1      char a;
  30   1              // this rutin sent LCD restart command code
  31   1      //      Reset_LCD ();
  32   1              Send_LCD_comm (0x4010,13);        // LCD sys enable
  33   1              LCD_CS_Mode (1);        //LCD_CS        = 1;
  34   1              Send_LCD_comm (0x4290,13);        // LCD bias
  35   1              LCD_CS_Mode (1);        //LCD_CS        = 1;
  36   1              Send_LCD_comm (0x4030,13);        // LCD ON
  37   1              LCD_CS_Mode (1);        //LCD_CS        = 1;    
  38   1      
  39   1              // turn ON all segments                 
  40   1              for(a=0; a<16; a++)     LCD_Buffer[a]=0xff;
  41   1              Print_LCD ();                                   
  42   1              Delay(100);
  43   1      
  44   1              // turn OFF all segments
  45   1              BlankLCD ();  // clean LCD buffer
  46   1              Print_LCD ();
  47   1              Start_Display();
  48   1              peep() ;
  49   1      }
  50          
  51          //---------------------------------------
  52          // Blank LCD display
  53          //---------------------------------------
  54          void BlankLCD ()        
  55          {
C51 COMPILER V9.03   LCD_CONTROLL_32_0                                                     08/07/2013 13:58:03 PAGE 2   

  56   1      char a;
  57   1      
  58   1              for(a=0; a<16; a++)     LCD_Buffer[a]=0x00;  // clean LCD buffer
  59   1      }
  60          
  61          
  62          //-----------------------------------------------------------------------------
  63          // LCD_Init
  64          //-----------------------------------------------------------------------------
  65          void Reset_LCD (void)
  66          {
  67   1       char a;
  68   1              LCD_CS_Mode (1);        //LCD_CS        = 1;       
  69   1              LCD_CLK_Mode(0);                //LCD_CLK = 0;    
  70   1              LCD_DATA_Mode(0);       //LCD_DATA=0;
  71   1              for(a=0; a<10;a++);               // Delay
  72   1              LCD_CS_Mode (0);        //LCD_CS        = 0;
  73   1              
  74   1      //=============================
  75   1      // serv the LCD output
  76   1      // gets b = byte to move out to serial IO
  77   1      // get POS the end bit number of the byte
  78   1      //=======================================
  79   1      
  80   1      }
  81          void Send_LCD_comm(int b, char pos)        //b=
  82          {
  83   1              char a, x;      
  84   1              Reset_LCD ();
  85   1      
  86   1              // put out 13 bits of addres and data           
  87   1              for(a=0; a<pos; a++){
  88   2                                                      b = b<<1;         //move the firs bit out not used
  89   2                                                      if(b& 0x8000) LCD_DATA_Mode(1); //LCD_DATA=1;    //monitore the secened bit
  90   2                                                      else LCD_DATA_Mode(0);  //LCD_DATA=0;
  91   2                                                      for(x=0;x<10;x++);  //Delay                                                                             
  92   2                                                      LCD_CLK_Mode(1);                //LCD_CLK = 1;   //clock the bit out, active high
  93   2                                                      for(x=0;x<10;x++);  //Delay                                                     
  94   2                                                      LCD_CLK_Mode(0);                //LCD_CLK = 0;  // reset the clock                                                                                              
  95   2                                                      }
  96   1              
  97   1      }
  98                                                                                  
  99          ////////////////////////////////////////////////////////////////////////////////////////////////
 100          
 101          
 102          
 103          
 104          //-----------------------------------------------------------------------------
 105          // print LCD
 106          //-----------------------------------------------------------------------------
 107          //
 108          // restart the LCD module
 109          //---------------------------
 110          // this rutin print on the LCD the buffer 
 111          
 112          void Print_LCD ()
 113          {
 114   1              char a, SEG,c, x;
 115   1      
 116   1      
 117   1              Reset_LCD ();
C51 COMPILER V9.03   LCD_CONTROLL_32_0                                                     08/07/2013 13:58:03 PAGE 3   

 118   1              Send_LCD_comm (0x5000,9);         // write command + addres=0;
 119   1      
 120   1              // send to LCD data from LCD buffer
 121   1              for(a=0; a<16; a++){
 122   2                                                      SEG=LCD_Buffer[a];         //copy LCD buff to shift register                                    
 123   2                                                      for (c=0; c<8; c++){
 124   3                                                                                              if(SEG & 0x80) LCD_DATA_Mode(1);        //LCD_DATA=1;    //monitorint bit
 125   3                                                                                              else LCD_DATA_Mode(0);  //LCD_DATA=0;
 126   3                                                                                              for(x=0;x<10;x++);  //Delay                                                                                                                                             
 127   3                                                                                              LCD_CLK_Mode(1);                //LCD_CLK = 1;   //clock out bit out, active high
 128   3                                                                                              for(x=0;x<10;x++);  //Delay     
 129   3                                                                                              LCD_CLK_Mode(0);                //LCD_CLK = 0;  // reset the clock
 130   3                                                                                              SEG = SEG<<1;
 131   3                                                                                              }
 132   2                                                      }
 133   1              LCD_CS_Mode (1);        //LCD_CS        = 1;     // close LCD
 134   1              
 135   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    310    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----       7
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
